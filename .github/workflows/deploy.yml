name: Production Deployment

on:
  push:
    branches: ["bugfix/#2_github_actions_scp_problem"]  # 모두 따옴표 처리
  workflow_dispatch:  # 수동 배포 가능

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create production application.yml
        run: |
          cd ./src/main/resources
          echo "${{ secrets.APPLICATION_PROD_YML }}" > ./application-prod.yml
        shell: bash

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/returnwork:${{ github.sha }},${{ secrets.DOCKER_USERNAME }}/returnwork:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create .env file for production
        run: |
          echo "SPRING_PROFILES_ACTIVE=prod" >> .env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
          echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
          echo "DOCKER_IMAGE=${{ secrets.DOCKER_USERNAME }}/returnwork:${{ github.sha }}" >> .env

      - name: Deploy to EC2
        env:
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
          EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
        run: |
          echo "$EC2_SSH_KEY" | base64 -d > private_key.pem
          chmod 600 private_key.pem
          
          # Copy deployment files to server with verbose logging
          echo "=== Copying docker-compose.yml ==="
          scp -v -i private_key.pem -o StrictHostKeyChecking=no docker-compose.yml $EC2_USERNAME@$EC2_HOST:/home/$EC2_USERNAME/
          echo "=== Copying .env file ==="
          scp -v -i private_key.pem -o StrictHostKeyChecking=no .env $EC2_USERNAME@$EC2_HOST:/home/$EC2_USERNAME/
          echo "=== Copy completed ==="
          
          # Deploy on server
          ssh -i private_key.pem -o StrictHostKeyChecking=no $EC2_USERNAME@$EC2_HOST "
            # Login to Docker Hub
            echo '${{ secrets.DOCKER_PASSWORD }}' | docker login -u '${{ secrets.DOCKER_USERNAME }}' --password-stdin
            
            # Stop existing containers
            docker-compose down || true
            
            # Pull latest image and start services
            docker-compose pull
            docker-compose up -d
            
            # Wait for services to be healthy
            echo 'Waiting for services to start...'
            sleep 30
            
            # Check if services are running
            docker-compose ps
            
            # Clean up old images
            docker image prune -f
          "
          
          rm -f private_key.pem
